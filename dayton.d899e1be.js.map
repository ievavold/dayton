{"version":3,"sources":["../src/components/combobox/fuzzy.ts","../src/components/combobox/combobox.ts","../src/dayton.ts"],"names":[],"mappings":"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","file":"dayton.d899e1be.js","sourceRoot":"../demo","sourcesContent":["interface Item {\n  value: unknown;\n  label: string;\n}\n\nexport const fuzzy = (pattern: string, items: Item[]): Item[] => {\n  return items\n    .map(item => ({ item, score: fuzzyMatch(pattern, item.label) }))\n    .filter(tuple => tuple.score[1])\n    .sort((a, b) => b.score[1] - a.score[1])\n    .map(({ item }) => item);\n};\n\n// LICENSE\n//\n//   This software is dual-licensed to the public domain and under the following\n//   license: you are granted a perpetual, irrevocable license to copy, modify,\n//   publish, and distribute this file as you see fit.\n//\n// VERSION\n//   0.1.0  (2016-03-28)  Initial release\n//\n// AUTHOR\n//   Forrest Smith\n//\n// CONTRIBUTORS\n//   Anurag Awasthi - updated to 0.2.0\n//\n// @link https://www.forrestthewoods.com/blog/reverse_engineering_sublime_texts_fuzzy_match/\n\nconst SEQUENTIAL_BONUS = 15; // bonus for adjacent matches\nconst SEPARATOR_BONUS = 30; // bonus if match occurs after a separator\nconst FIRST_LETTER_BONUS = 50; // bonus if the first letter is matched\n\nconst LEADING_LETTER_PENALTY = -5; // penalty applied for every letter in str before the first match\nconst MAX_LEADING_LETTER_PENALTY = -15; // maximum penalty for leading letters\nconst UNMATCHED_LETTER_PENALTY = -1;\n\nconst fuzzyMatch = (pattern: string, str: string): [boolean, number] => {\n  const recursionCount = 0;\n  const recursionLimit = 10;\n  const matches: number[] = [];\n  const maxMatches = 256;\n\n  return fuzzyMatchRecursive(\n    pattern,\n    str,\n    0 /* patternCurIndex */,\n    0 /* strCurrIndex */,\n    null /* srcMatces */,\n    matches,\n    maxMatches,\n    0 /* nextMatch */,\n    recursionCount,\n    recursionLimit,\n  );\n};\n\nconst fuzzyMatchRecursive = (\n  pattern: string,\n  str: string,\n  patternCurIndex: number,\n  strCurrIndex: number,\n  srcMatces: number[] | null,\n  matches: number[],\n  maxMatches: number,\n  nextMatch: number,\n  recursionCount: number,\n  recursionLimit: number,\n): [boolean, number] => {\n  let outScore = 0;\n\n  // Return if recursion limit is reached.\n  if (++recursionCount >= recursionLimit) {\n    return [false, outScore];\n  }\n\n  // Return if we reached ends of strings.\n  if (patternCurIndex === pattern.length || strCurrIndex === str.length) {\n    return [false, outScore];\n  }\n\n  // Recursion params\n  let recursiveMatch = false;\n  let bestRecursiveMatches: number[] = [];\n  let bestRecursiveScore = 0;\n\n  // Loop through pattern and str looking for a match.\n  let firstMatch = true;\n  while (patternCurIndex < pattern.length && strCurrIndex < str.length) {\n    // Match found.\n    if (\n      pattern[patternCurIndex].toLowerCase() === str[strCurrIndex].toLowerCase()\n    ) {\n      if (nextMatch >= maxMatches) {\n        return [false, outScore];\n      }\n\n      if (firstMatch && srcMatces) {\n        matches = [...srcMatces];\n        firstMatch = false;\n      }\n\n      const recursiveMatches: number[] = [];\n      const [matched, recursiveScore] = fuzzyMatchRecursive(\n        pattern,\n        str,\n        patternCurIndex,\n        strCurrIndex + 1,\n        matches,\n        recursiveMatches,\n        maxMatches,\n        nextMatch,\n        recursionCount,\n        recursionLimit,\n      );\n\n      if (matched) {\n        // Pick best recursive score.\n        if (!recursiveMatch || recursiveScore > bestRecursiveScore) {\n          bestRecursiveMatches = [...recursiveMatches];\n          bestRecursiveScore = recursiveScore;\n        }\n        recursiveMatch = true;\n      }\n\n      matches[nextMatch++] = strCurrIndex;\n      ++patternCurIndex;\n    }\n    ++strCurrIndex;\n  }\n\n  const matched = patternCurIndex === pattern.length;\n\n  if (matched) {\n    outScore = 100;\n\n    // Apply leading letter penalty\n    let penalty = LEADING_LETTER_PENALTY * matches[0];\n    penalty =\n      penalty < MAX_LEADING_LETTER_PENALTY\n        ? MAX_LEADING_LETTER_PENALTY\n        : penalty;\n    outScore += penalty;\n\n    // Apply unmatched penalty\n    const unmatched = str.length - nextMatch;\n    outScore += UNMATCHED_LETTER_PENALTY * unmatched;\n\n    // Apply ordering bonuses\n    for (let i = 0; i < nextMatch; i++) {\n      const currIdx = matches[i];\n\n      if (i > 0) {\n        const prevIdx = matches[i - 1];\n        if (currIdx === prevIdx + 1) {\n          outScore += SEQUENTIAL_BONUS;\n        }\n      }\n\n      // Check for bonuses based on neighbor character value.\n      if (currIdx > 0) {\n        // Camel case\n        const neighbor = str[currIdx - 1];\n        const isNeighbourSeparator = neighbor === '-' || neighbor === ' ';\n        if (isNeighbourSeparator) {\n          outScore += SEPARATOR_BONUS;\n        }\n      } else {\n        // First letter\n        outScore += FIRST_LETTER_BONUS;\n      }\n    }\n\n    // Return best result\n    if (recursiveMatch && (!matched || bestRecursiveScore > outScore)) {\n      // Recursive score is better than \"this\"\n      matches = [...bestRecursiveMatches];\n      outScore = bestRecursiveScore;\n      return [true, outScore];\n    } else if (matched) {\n      // \"this\" score is better than recursive\n      return [true, outScore];\n    } else {\n      return [false, outScore];\n    }\n  }\n  return [false, outScore];\n};\n","import { fuzzy } from './fuzzy';\n\ninterface Item {\n  label: string;\n  value: unknown;\n}\n\ntype State =\n  | { state: 'closed'; choice: Item | null }\n  | {\n      state: 'partial';\n      prior: Item | null;\n      filter: string;\n      filtered: Item[];\n      selected: number;\n    }\n  | { state: 'complete'; choice: Item; filtered: Item[]; selected: number };\n\ntype Msg =\n  | { msg: 'blur' }\n  | { msg: 'focus' }\n  | { msg: 'arrowUp' }\n  | { msg: 'arrowDown' }\n  | { msg: 'escape' }\n  | { msg: 'enter' }\n  | { msg: 'input'; newValue: string }\n  | { msg: 'click'; choice: Item };\n\nlet id = 0;\n\nexport class DaytonCombobox {\n  private allItems: Item[];\n\n  private state: State = { state: 'closed', choice: null };\n\n  private originalLabel: HTMLLabelElement | null = null;\n\n  private uniqueId = `dayton-combobox-${id++}`;\n  private labelId = `${this.uniqueId}-label`;\n  private comboboxId = `${this.uniqueId}-combobox`;\n  private inputId = `${this.uniqueId}-input`;\n  private listboxId = `${this.uniqueId}-listbox`;\n\n  private labelElem: HTMLLabelElement;\n  private comboboxElem: HTMLDivElement;\n  private inputElem: HTMLInputElement;\n  private listboxElem: HTMLUListElement;\n\n  constructor(originalSelect: HTMLSelectElement) {\n    // Convert each <option> element into an Item\n    this.allItems = [];\n    for (let i = 0; i < originalSelect.options.length; i++) {\n      const label = originalSelect.options[i].innerText;\n      const value = originalSelect.options[i].value;\n      this.allItems.push({ label, value });\n    }\n\n    // Mark the <select> element as being instantiated and hidden\n    originalSelect.classList.add('dayton-combobox__select');\n    originalSelect.setAttribute('aria-hidden', 'true');\n\n    // Mark any <label> element as hidden\n    if (originalSelect.id !== '') {\n      const label = document.querySelector(`label[for=\"${originalSelect.id}\"]`);\n      if (label instanceof HTMLLabelElement) {\n        this.originalLabel = label;\n        this.originalLabel.classList.add(`dayton-combobox__label`);\n        this.originalLabel.setAttribute('aria-hidden', 'true');\n      }\n    }\n\n    /**\n     * Create the HTML elements for the combobox UI\n     */\n\n    this.labelElem = document.createElement('label');\n    this.labelElem.id = this.labelId;\n    if (this.originalLabel) {\n      this.labelElem.innerText = this.originalLabel.innerText;\n    }\n\n    const spacer = document.createElement('div');\n    spacer.classList.add(`dayton-combobox__spacer`);\n\n    const overlay = document.createElement('div');\n    overlay.classList.add(`dayton-combobox__overlay`);\n    spacer.appendChild(overlay);\n\n    this.comboboxElem = document.createElement('div');\n    this.comboboxElem.id = this.comboboxId;\n    this.comboboxElem.classList.add(`dayton-combobox__combobox`);\n    this.comboboxElem.setAttribute('role', 'combobox');\n    this.comboboxElem.setAttribute('aria-owns', this.listboxId);\n    this.comboboxElem.setAttribute('aria-haspopup', 'listbox');\n    this.comboboxElem.setAttribute('aria-expanded', 'false');\n    overlay.appendChild(this.comboboxElem);\n\n    this.inputElem = document.createElement('input');\n    this.inputElem.id = this.inputId;\n    this.inputElem.classList.add(`dayton-combobox__input`);\n    this.inputElem.setAttribute('type', 'text');\n    this.inputElem.setAttribute('aria-autocomplete', 'list');\n    this.inputElem.setAttribute('aria-controls', this.listboxId);\n    this.inputElem.setAttribute('aria-labelledby', this.labelId);\n    this.inputElem.addEventListener('focus', this.onInputFocus.bind(this));\n    this.inputElem.addEventListener('blur', this.onInputBlur.bind(this));\n    this.inputElem.addEventListener('keyup', this.onInputKeyup.bind(this));\n    this.inputElem.addEventListener('keydown', this.onInputKeydown.bind(this));\n    this.comboboxElem.appendChild(this.inputElem);\n\n    this.listboxElem = document.createElement('ul');\n    this.listboxElem.id = this.listboxId;\n    this.listboxElem.classList.add(`dayton-combobox__listbox`);\n    this.listboxElem.setAttribute('role', 'listbox');\n    this.listboxElem.setAttribute('aria-labelledby', this.labelId);\n    overlay.appendChild(this.listboxElem);\n\n    // Attach the newly created elements to the DOM after the original <select>\n    originalSelect.parentNode!.insertBefore(spacer, originalSelect.nextSibling);\n    originalSelect.parentNode!.insertBefore(this.labelElem, spacer);\n  }\n\n  private onInputFocus() {\n    this.next({ msg: 'focus' });\n  }\n\n  private onInputBlur() {\n    this.next({ msg: 'blur' });\n  }\n\n  private onInputKeyup(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'Escape':\n      case 'Enter':\n        event.preventDefault();\n        break;\n      default:\n        const newValue = this.inputElem.value;\n        this.next({ msg: 'input', newValue });\n    }\n  }\n\n  private onInputKeydown(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'ArrowUp':\n        event.preventDefault();\n        this.next({ msg: 'arrowUp' });\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.next({ msg: 'arrowDown' });\n        break;\n      case 'Escape':\n        event.preventDefault();\n        this.next({ msg: 'escape' });\n        break;\n      case 'Enter':\n        event.preventDefault();\n        this.next({ msg: 'enter' });\n        break;\n      default:\n        const newValue = this.inputElem.value;\n        this.next({ msg: 'input', newValue });\n    }\n  }\n\n  private next(msg: Msg) {\n    const oldState = this.state;\n    this.state = this.reduce(msg, this.state);\n    this.applyEffects(oldState, msg);\n  }\n\n  private applyEffects(oldState: State, msg: Msg) {\n    if (oldState.state === 'closed' && this.state.state !== 'closed') {\n      // moving from closed -> open\n      this.inputElem.classList.add(`dayton-combobox__input--open`);\n      this.listboxElem.classList.add(`dayton-combobox__listbox--open`);\n    } else if (this.state.state === 'closed' && oldState.state !== 'closed') {\n      // moving from open -> closed\n      this.inputElem.classList.remove(`dayton-combobox__input--open`);\n      this.listboxElem.classList.remove(`dayton-combobox__listbox--open`);\n\n      // check if the input should be cleared\n      this.inputElem.value = this.state.choice?.label ?? '';\n    }\n\n    const selectedClass = `dayton-combobox--selected`;\n\n    // If the msg moved which filtered item was selected, update\n    // the DOM classes to reflect the new selected item.\n    if (\n      this.state.state !== 'closed' &&\n      (msg.msg === 'arrowDown' || msg.msg === 'arrowUp')\n    ) {\n      const oldSelected = oldState.state !== 'closed' ? oldState.selected : -1;\n      if (oldSelected >= 0) {\n        this.listboxElem.children\n          .item(oldSelected)\n          ?.classList?.remove(selectedClass);\n      }\n\n      this.listboxElem.children\n        .item(this.state.selected)\n        ?.classList?.add(selectedClass);\n    }\n\n    // True if the listbox should be cleared either because the list needs to\n    // be rebuilt OR because the listbox has been closed.\n    const shouldClearList =\n      this.state.state === 'closed' && oldState.state !== 'closed';\n\n    // Refresh the list if:\n    // (a) the combobox _was_ closed and is now open\n    // (b) the contents of the `filtered` attribute in the state has changed\n    const shouldRefreshList =\n      (oldState.state === 'closed' && this.state.state !== 'closed') ||\n      (oldState.state !== 'closed' &&\n        this.state.state !== 'closed' &&\n        oldState.filtered !== this.state.filtered);\n\n    if (shouldClearList || shouldRefreshList) {\n      this.listboxElem.innerText = '';\n    }\n\n    if (shouldRefreshList && this.state.state !== 'closed') {\n      // Potentially inefficient but easy\n      const state = this.state;\n      this.state.filtered.forEach((item, index) => {\n        const elem = document.createElement('li');\n        elem.setAttribute('value', item.value as string);\n        elem.innerText = item.label;\n\n        if (index === state.selected) {\n          elem.classList.add(selectedClass);\n        }\n\n        elem.addEventListener('mousedown', event => {\n          event.preventDefault();\n          this.next({ msg: 'click', choice: item });\n        });\n        this.listboxElem.appendChild(elem);\n      });\n    }\n  }\n\n  private reduce(msg: Msg, state: State): State {\n    switch (msg.msg) {\n      case 'focus': {\n        if (state.state === 'closed') {\n          const filtered = state.choice\n            ? fuzzy(state.choice.label, this.allItems)\n            : this.allItems;\n          const selected = 0;\n          return state.choice\n            ? { state: 'complete', choice: state.choice, filtered, selected }\n            : { state: 'partial', prior: null, filter: '', filtered, selected };\n        }\n        break;\n      }\n\n      case 'blur': {\n        if (state.state === 'partial') {\n          return { state: 'closed', choice: null };\n        } else if (state.state === 'complete') {\n          return { state: 'closed', choice: state.choice };\n        }\n        break;\n      }\n\n      case 'input': {\n        if (\n          (state.state === 'closed' && msg.newValue === state.choice?.label) ||\n          (state.state === 'partial' && state.filter === msg.newValue) ||\n          (state.state === 'complete' && state.choice.label === msg.newValue)\n        ) {\n          // Do nothing because the filter hasn't meaningfully changed\n          return state;\n        }\n\n        const filtered =\n          msg.newValue === ''\n            ? this.allItems\n            : fuzzy(msg.newValue, this.allItems);\n\n        return {\n          state: 'partial',\n          prior: getPriorFromState(state),\n          filter: msg.newValue,\n          filtered: filtered.slice(0, 10),\n          selected: 0,\n        };\n      }\n\n      case 'arrowUp': {\n        if (state.state !== 'closed') {\n          const selected =\n            state.selected <= 0\n              ? state.filtered.length - 1\n              : state.selected - 1;\n          return { ...state, selected };\n        }\n        break;\n      }\n\n      case 'arrowDown': {\n        if (state.state !== 'closed') {\n          const selected = (state.selected + 1) % state.filtered.length;\n          return { ...state, selected };\n        }\n        break;\n      }\n\n      case 'escape': {\n        if (state.state === 'partial') {\n          return { state: 'closed', choice: state.prior };\n        } else if (state.state === 'complete') {\n          return { state: 'closed', choice: state.choice };\n        }\n        break;\n      }\n\n      case 'enter': {\n        if (state.state !== 'closed') {\n          return { state: 'closed', choice: state.filtered[state.selected] };\n        }\n        break;\n      }\n\n      case 'click': {\n        if (state.state !== 'closed') {\n          return { state: 'closed', choice: msg.choice };\n        }\n      }\n    }\n\n    // When in doubt, change nothing\n    return state;\n  }\n\n  /**\n   * Find structures in the DOM that can be\n   * turned into live combobox components.\n   */\n  public static initAll() {\n    document.querySelectorAll('select.dayton-combobox').forEach(sel => {\n      if (\n        sel.classList.contains('dayton-combobox__select') ||\n        !(sel instanceof HTMLSelectElement)\n      ) {\n        // This particular combobox has already been\n        // instantiated or is not a <select> element.\n        return;\n      }\n\n      new DaytonCombobox(sel);\n    });\n  }\n}\n\nconst getPriorFromState = (state: State): Item | null => {\n  if (state.state === 'complete') {\n    return state.choice;\n  } else if (state.state === 'partial') {\n    return state.prior;\n  } else {\n    return state.choice;\n  }\n};\n","import { DaytonCombobox } from './components/combobox/combobox';\n\nDaytonCombobox.initAll();\n"]}